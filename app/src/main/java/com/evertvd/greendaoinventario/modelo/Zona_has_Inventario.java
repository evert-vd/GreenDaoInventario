package com.evertvd.greendaoinventario.modelo;

import org.greenrobot.greendao.annotation.*;

import com.evertvd.greendaoinventario.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.greendaoinventario.modelo.dao.InventarioDao;
import com.evertvd.greendaoinventario.modelo.dao.ZonaDao;
import com.evertvd.greendaoinventario.modelo.dao.Zona_has_InventarioDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ZONA_HAS__INVENTARIO".
 */
@Entity(active = true)
public class Zona_has_Inventario {
    private String nombreZona;

    @Index
    private Long inventario_id2;

    @Index
    private Long zona_id2;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient Zona_has_InventarioDao myDao;

    @ToOne(joinProperty = "inventario_id2")
    private Inventario inventario;

    @Generated
    private transient Long inventario__resolvedKey;

    @ToOne(joinProperty = "zona_id2")
    private Zona zona;

    @Generated
    private transient Long zona__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Zona_has_Inventario() {
    }

    @Generated
    public Zona_has_Inventario(String nombreZona, Long inventario_id2, Long zona_id2) {
        this.nombreZona = nombreZona;
        this.inventario_id2 = inventario_id2;
        this.zona_id2 = zona_id2;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getZona_has_InventarioDao() : null;
    }

    public String getNombreZona() {
        return nombreZona;
    }

    public void setNombreZona(String nombreZona) {
        this.nombreZona = nombreZona;
    }

    public Long getInventario_id2() {
        return inventario_id2;
    }

    public void setInventario_id2(Long inventario_id2) {
        this.inventario_id2 = inventario_id2;
    }

    public Long getZona_id2() {
        return zona_id2;
    }

    public void setZona_id2(Long zona_id2) {
        this.zona_id2 = zona_id2;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Inventario getInventario() {
        Long __key = this.inventario_id2;
        if (inventario__resolvedKey == null || !inventario__resolvedKey.equals(__key)) {
            __throwIfDetached();
            InventarioDao targetDao = daoSession.getInventarioDao();
            Inventario inventarioNew = targetDao.load(__key);
            synchronized (this) {
                inventario = inventarioNew;
            	inventario__resolvedKey = __key;
            }
        }
        return inventario;
    }

    @Generated
    public void setInventario(Inventario inventario) {
        synchronized (this) {
            this.inventario = inventario;
            inventario_id2 = inventario == null ? null : inventario.getId();
            inventario__resolvedKey = inventario_id2;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Zona getZona() {
        Long __key = this.zona_id2;
        if (zona__resolvedKey == null || !zona__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ZonaDao targetDao = daoSession.getZonaDao();
            Zona zonaNew = targetDao.load(__key);
            synchronized (this) {
                zona = zonaNew;
            	zona__resolvedKey = __key;
            }
        }
        return zona;
    }

    @Generated
    public void setZona(Zona zona) {
        synchronized (this) {
            this.zona = zona;
            zona_id2 = zona == null ? null : zona.getId();
            zona__resolvedKey = zona_id2;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return nombreZona.toString();
    }
    // KEEP METHODS END

}
