package com.evertvd.greendaoinventario.modelo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.evertvd.greendaoinventario.modelo.Empresa;

import com.evertvd.greendaoinventario.modelo.Inventario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTARIO".
*/
public class InventarioDao extends AbstractDao<Inventario, Long> {

    public static final String TABLENAME = "INVENTARIO";

    /**
     * Properties of entity Inventario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Numinventario = new Property(1, Integer.class, "numinventario", false, "NUMINVENTARIO");
        public final static Property Numequipo = new Property(2, Integer.class, "numequipo", false, "NUMEQUIPO");
        public final static Property Fecha = new Property(3, String.class, "fecha", false, "FECHA");
        public final static Property Estado = new Property(4, Integer.class, "estado", false, "ESTADO");
        public final static Property Contexto = new Property(5, Integer.class, "contexto", false, "CONTEXTO");
        public final static Property Empresa_id = new Property(6, Long.class, "empresa_id", false, "EMPRESA_ID");
    }

    private DaoSession daoSession;

    private Query<Inventario> empresa_InventarioListQuery;

    public InventarioDao(DaoConfig config) {
        super(config);
    }
    
    public InventarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTARIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NUMINVENTARIO\" INTEGER," + // 1: numinventario
                "\"NUMEQUIPO\" INTEGER," + // 2: numequipo
                "\"FECHA\" TEXT," + // 3: fecha
                "\"ESTADO\" INTEGER," + // 4: estado
                "\"CONTEXTO\" INTEGER," + // 5: contexto
                "\"EMPRESA_ID\" INTEGER);"); // 6: empresa_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_INVENTARIO_EMPRESA_ID ON INVENTARIO" +
                " (\"EMPRESA_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTARIO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Inventario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer numinventario = entity.getNuminventario();
        if (numinventario != null) {
            stmt.bindLong(2, numinventario);
        }
 
        Integer numequipo = entity.getNumequipo();
        if (numequipo != null) {
            stmt.bindLong(3, numequipo);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(4, fecha);
        }
 
        Integer estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(5, estado);
        }
 
        Integer contexto = entity.getContexto();
        if (contexto != null) {
            stmt.bindLong(6, contexto);
        }
 
        Long empresa_id = entity.getEmpresa_id();
        if (empresa_id != null) {
            stmt.bindLong(7, empresa_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Inventario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer numinventario = entity.getNuminventario();
        if (numinventario != null) {
            stmt.bindLong(2, numinventario);
        }
 
        Integer numequipo = entity.getNumequipo();
        if (numequipo != null) {
            stmt.bindLong(3, numequipo);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(4, fecha);
        }
 
        Integer estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(5, estado);
        }
 
        Integer contexto = entity.getContexto();
        if (contexto != null) {
            stmt.bindLong(6, contexto);
        }
 
        Long empresa_id = entity.getEmpresa_id();
        if (empresa_id != null) {
            stmt.bindLong(7, empresa_id);
        }
    }

    @Override
    protected final void attachEntity(Inventario entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Inventario readEntity(Cursor cursor, int offset) {
        Inventario entity = new Inventario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // numinventario
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // numequipo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fecha
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // estado
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // contexto
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // empresa_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Inventario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNuminventario(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNumequipo(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFecha(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstado(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setContexto(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setEmpresa_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Inventario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Inventario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Inventario entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "inventarioList" to-many relationship of Empresa. */
    public List<Inventario> _queryEmpresa_InventarioList(Long empresa_id) {
        synchronized (this) {
            if (empresa_InventarioListQuery == null) {
                QueryBuilder<Inventario> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Empresa_id.eq(null));
                empresa_InventarioListQuery = queryBuilder.build();
            }
        }
        Query<Inventario> query = empresa_InventarioListQuery.forCurrentThread();
        query.setParameter(0, empresa_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEmpresaDao().getAllColumns());
            builder.append(" FROM INVENTARIO T");
            builder.append(" LEFT JOIN EMPRESA T0 ON T.\"EMPRESA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Inventario loadCurrentDeep(Cursor cursor, boolean lock) {
        Inventario entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Empresa empresa = loadCurrentOther(daoSession.getEmpresaDao(), cursor, offset);
        entity.setEmpresa(empresa);

        return entity;    
    }

    public Inventario loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Inventario> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Inventario> list = new ArrayList<Inventario>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Inventario> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Inventario> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
