package com.evertvd.greendaoinventario.modelo;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.evertvd.greendaoinventario.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.greendaoinventario.modelo.dao.EmpresaDao;
import com.evertvd.greendaoinventario.modelo.dao.InventarioDao;
import com.evertvd.greendaoinventario.modelo.dao.ProductoDao;
import com.evertvd.greendaoinventario.modelo.dao.Zona_has_InventarioDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "INVENTARIO".
 */
@Entity(active = true)
public class Inventario {

    @Id(autoincrement = true)
    private Long id;
    private Integer numinventario;
    private Integer numequipo;
    private String fecha;
    private Integer estado;
    private Integer contexto;

    @Index
    private Long empresa_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient InventarioDao myDao;

    @ToOne(joinProperty = "empresa_id")
    private Empresa empresa;

    @Generated
    private transient Long empresa__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "inventario_id2")
    })
    private List<Zona_has_Inventario> zona_has_InventarioList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "inventario_id")
    })
    private List<Producto> productoList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Inventario() {
    }

    public Inventario(Long id) {
        this.id = id;
    }

    @Generated
    public Inventario(Long id, Integer numinventario, Integer numequipo, String fecha, Integer estado, Integer contexto, Long empresa_id) {
        this.id = id;
        this.numinventario = numinventario;
        this.numequipo = numequipo;
        this.fecha = fecha;
        this.estado = estado;
        this.contexto = contexto;
        this.empresa_id = empresa_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInventarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getNuminventario() {
        return numinventario;
    }

    public void setNuminventario(Integer numinventario) {
        this.numinventario = numinventario;
    }

    public Integer getNumequipo() {
        return numequipo;
    }

    public void setNumequipo(Integer numequipo) {
        this.numequipo = numequipo;
    }

    public String getFecha() {
        return fecha;
    }

    public void setFecha(String fecha) {
        this.fecha = fecha;
    }

    public Integer getEstado() {
        return estado;
    }

    public void setEstado(Integer estado) {
        this.estado = estado;
    }

    public Integer getContexto() {
        return contexto;
    }

    public void setContexto(Integer contexto) {
        this.contexto = contexto;
    }

    public Long getEmpresa_id() {
        return empresa_id;
    }

    public void setEmpresa_id(Long empresa_id) {
        this.empresa_id = empresa_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Empresa getEmpresa() {
        Long __key = this.empresa_id;
        if (empresa__resolvedKey == null || !empresa__resolvedKey.equals(__key)) {
            __throwIfDetached();
            EmpresaDao targetDao = daoSession.getEmpresaDao();
            Empresa empresaNew = targetDao.load(__key);
            synchronized (this) {
                empresa = empresaNew;
            	empresa__resolvedKey = __key;
            }
        }
        return empresa;
    }

    @Generated
    public void setEmpresa(Empresa empresa) {
        synchronized (this) {
            this.empresa = empresa;
            empresa_id = empresa == null ? null : empresa.getId();
            empresa__resolvedKey = empresa_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Zona_has_Inventario> getZona_has_InventarioList() {
        if (zona_has_InventarioList == null) {
            __throwIfDetached();
            Zona_has_InventarioDao targetDao = daoSession.getZona_has_InventarioDao();
            List<Zona_has_Inventario> zona_has_InventarioListNew = targetDao._queryInventario_Zona_has_InventarioList(id);
            synchronized (this) {
                if(zona_has_InventarioList == null) {
                    zona_has_InventarioList = zona_has_InventarioListNew;
                }
            }
        }
        return zona_has_InventarioList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetZona_has_InventarioList() {
        zona_has_InventarioList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Producto> getProductoList() {
        if (productoList == null) {
            __throwIfDetached();
            ProductoDao targetDao = daoSession.getProductoDao();
            List<Producto> productoListNew = targetDao._queryInventario_ProductoList(id);
            synchronized (this) {
                if(productoList == null) {
                    productoList = productoListNew;
                }
            }
        }
        return productoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetProductoList() {
        productoList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
