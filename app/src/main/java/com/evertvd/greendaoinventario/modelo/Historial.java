package com.evertvd.greendaoinventario.modelo;

import org.greenrobot.greendao.annotation.*;

import com.evertvd.greendaoinventario.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.greendaoinventario.modelo.dao.ConteoDao;
import com.evertvd.greendaoinventario.modelo.dao.HistorialDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "HISTORIAL".
 */
@Entity(active = true)
public class Historial {

    @Id(autoincrement = true)
    private Long id;
    private Integer cantidad;
    private String observacion;
    private String fecharegistro;
    private String fechamodificacion;
    private Integer tipo;

    @Index
    private Long conteo_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient HistorialDao myDao;

    @ToOne(joinProperty = "conteo_id")
    private Conteo conteo;

    @Generated
    private transient Long conteo__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Historial() {
    }

    public Historial(Long id) {
        this.id = id;
    }

    @Generated
    public Historial(Long id, Integer cantidad, String observacion, String fecharegistro, String fechamodificacion, Integer tipo, Long conteo_id) {
        this.id = id;
        this.cantidad = cantidad;
        this.observacion = observacion;
        this.fecharegistro = fecharegistro;
        this.fechamodificacion = fechamodificacion;
        this.tipo = tipo;
        this.conteo_id = conteo_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHistorialDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCantidad() {
        return cantidad;
    }

    public void setCantidad(Integer cantidad) {
        this.cantidad = cantidad;
    }

    public String getObservacion() {
        return observacion;
    }

    public void setObservacion(String observacion) {
        this.observacion = observacion;
    }

    public String getFecharegistro() {
        return fecharegistro;
    }

    public void setFecharegistro(String fecharegistro) {
        this.fecharegistro = fecharegistro;
    }

    public String getFechamodificacion() {
        return fechamodificacion;
    }

    public void setFechamodificacion(String fechamodificacion) {
        this.fechamodificacion = fechamodificacion;
    }

    public Integer getTipo() {
        return tipo;
    }

    public void setTipo(Integer tipo) {
        this.tipo = tipo;
    }

    public Long getConteo_id() {
        return conteo_id;
    }

    public void setConteo_id(Long conteo_id) {
        this.conteo_id = conteo_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Conteo getConteo() {
        Long __key = this.conteo_id;
        if (conteo__resolvedKey == null || !conteo__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ConteoDao targetDao = daoSession.getConteoDao();
            Conteo conteoNew = targetDao.load(__key);
            synchronized (this) {
                conteo = conteoNew;
            	conteo__resolvedKey = __key;
            }
        }
        return conteo;
    }

    @Generated
    public void setConteo(Conteo conteo) {
        synchronized (this) {
            this.conteo = conteo;
            conteo_id = conteo == null ? null : conteo.getId();
            conteo__resolvedKey = conteo_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
