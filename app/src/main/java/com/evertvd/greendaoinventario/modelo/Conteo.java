package com.evertvd.greendaoinventario.modelo;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.evertvd.greendaoinventario.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.greendaoinventario.modelo.dao.ConteoDao;
import com.evertvd.greendaoinventario.modelo.dao.HistorialDao;
import com.evertvd.greendaoinventario.modelo.dao.ProductoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CONTEO".
 */
@Entity(active = true)
public class Conteo {

    @Id(autoincrement = true)
    private Long id;
    private Integer cantidad;
    private String observacion;
    private String fecharegistro;
    private Integer validado;
    private Integer estado;

    @Index
    private Long producto_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ConteoDao myDao;

    @ToOne(joinProperty = "producto_id")
    private Producto producto;

    @Generated
    private transient Long producto__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "conteo_id")
    })
    private List<Historial> historialList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Conteo() {
    }

    public Conteo(Long id) {
        this.id = id;
    }

    @Generated
    public Conteo(Long id, Integer cantidad, String observacion, String fecharegistro, Integer validado, Integer estado, Long producto_id) {
        this.id = id;
        this.cantidad = cantidad;
        this.observacion = observacion;
        this.fecharegistro = fecharegistro;
        this.validado = validado;
        this.estado = estado;
        this.producto_id = producto_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConteoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCantidad() {
        return cantidad;
    }

    public void setCantidad(Integer cantidad) {
        this.cantidad = cantidad;
    }

    public String getObservacion() {
        return observacion;
    }

    public void setObservacion(String observacion) {
        this.observacion = observacion;
    }

    public String getFecharegistro() {
        return fecharegistro;
    }

    public void setFecharegistro(String fecharegistro) {
        this.fecharegistro = fecharegistro;
    }

    public Integer getValidado() {
        return validado;
    }

    public void setValidado(Integer validado) {
        this.validado = validado;
    }

    public Integer getEstado() {
        return estado;
    }

    public void setEstado(Integer estado) {
        this.estado = estado;
    }

    public Long getProducto_id() {
        return producto_id;
    }

    public void setProducto_id(Long producto_id) {
        this.producto_id = producto_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Producto getProducto() {
        Long __key = this.producto_id;
        if (producto__resolvedKey == null || !producto__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ProductoDao targetDao = daoSession.getProductoDao();
            Producto productoNew = targetDao.load(__key);
            synchronized (this) {
                producto = productoNew;
            	producto__resolvedKey = __key;
            }
        }
        return producto;
    }

    @Generated
    public void setProducto(Producto producto) {
        synchronized (this) {
            this.producto = producto;
            producto_id = producto == null ? null : producto.getId();
            producto__resolvedKey = producto_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Historial> getHistorialList() {
        if (historialList == null) {
            __throwIfDetached();
            HistorialDao targetDao = daoSession.getHistorialDao();
            List<Historial> historialListNew = targetDao._queryConteo_HistorialList(id);
            synchronized (this) {
                if(historialList == null) {
                    historialList = historialListNew;
                }
            }
        }
        return historialList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetHistorialList() {
        historialList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
