package com.evertvd.greendaoinventario.modelo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.evertvd.greendaoinventario.modelo.Producto;

import com.evertvd.greendaoinventario.modelo.Conteo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTEO".
*/
public class ConteoDao extends AbstractDao<Conteo, Long> {

    public static final String TABLENAME = "CONTEO";

    /**
     * Properties of entity Conteo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cantidad = new Property(1, Integer.class, "cantidad", false, "CANTIDAD");
        public final static Property Observacion = new Property(2, String.class, "observacion", false, "OBSERVACION");
        public final static Property Fecharegistro = new Property(3, String.class, "fecharegistro", false, "FECHAREGISTRO");
        public final static Property Validado = new Property(4, Integer.class, "validado", false, "VALIDADO");
        public final static Property Estado = new Property(5, Integer.class, "estado", false, "ESTADO");
        public final static Property Producto_id = new Property(6, Long.class, "producto_id", false, "PRODUCTO_ID");
    }

    private DaoSession daoSession;

    private Query<Conteo> producto_ConteoListQuery;

    public ConteoDao(DaoConfig config) {
        super(config);
    }
    
    public ConteoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTEO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CANTIDAD\" INTEGER," + // 1: cantidad
                "\"OBSERVACION\" TEXT," + // 2: observacion
                "\"FECHAREGISTRO\" TEXT," + // 3: fecharegistro
                "\"VALIDADO\" INTEGER," + // 4: validado
                "\"ESTADO\" INTEGER," + // 5: estado
                "\"PRODUCTO_ID\" INTEGER);"); // 6: producto_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CONTEO_PRODUCTO_ID ON CONTEO" +
                " (\"PRODUCTO_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Conteo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(2, cantidad);
        }
 
        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(3, observacion);
        }
 
        String fecharegistro = entity.getFecharegistro();
        if (fecharegistro != null) {
            stmt.bindString(4, fecharegistro);
        }
 
        Integer validado = entity.getValidado();
        if (validado != null) {
            stmt.bindLong(5, validado);
        }
 
        Integer estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(6, estado);
        }
 
        Long producto_id = entity.getProducto_id();
        if (producto_id != null) {
            stmt.bindLong(7, producto_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Conteo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(2, cantidad);
        }
 
        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(3, observacion);
        }
 
        String fecharegistro = entity.getFecharegistro();
        if (fecharegistro != null) {
            stmt.bindString(4, fecharegistro);
        }
 
        Integer validado = entity.getValidado();
        if (validado != null) {
            stmt.bindLong(5, validado);
        }
 
        Integer estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(6, estado);
        }
 
        Long producto_id = entity.getProducto_id();
        if (producto_id != null) {
            stmt.bindLong(7, producto_id);
        }
    }

    @Override
    protected final void attachEntity(Conteo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Conteo readEntity(Cursor cursor, int offset) {
        Conteo entity = new Conteo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cantidad
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // observacion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fecharegistro
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // validado
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // estado
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // producto_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Conteo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCantidad(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setObservacion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFecharegistro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValidado(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEstado(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setProducto_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Conteo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Conteo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Conteo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "conteoList" to-many relationship of Producto. */
    public List<Conteo> _queryProducto_ConteoList(Long producto_id) {
        synchronized (this) {
            if (producto_ConteoListQuery == null) {
                QueryBuilder<Conteo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Producto_id.eq(null));
                producto_ConteoListQuery = queryBuilder.build();
            }
        }
        Query<Conteo> query = producto_ConteoListQuery.forCurrentThread();
        query.setParameter(0, producto_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductoDao().getAllColumns());
            builder.append(" FROM CONTEO T");
            builder.append(" LEFT JOIN PRODUCTO T0 ON T.\"PRODUCTO_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Conteo loadCurrentDeep(Cursor cursor, boolean lock) {
        Conteo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Producto producto = loadCurrentOther(daoSession.getProductoDao(), cursor, offset);
        entity.setProducto(producto);

        return entity;    
    }

    public Conteo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Conteo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Conteo> list = new ArrayList<Conteo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Conteo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Conteo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
